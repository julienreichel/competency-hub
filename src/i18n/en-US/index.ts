export default {
  dashboard: {
    welcome: 'Welcome back, {name}!',
    defaultName: 'there',
    subtitle: {
      student: 'Here is your learning snapshot.',
      parent: "Monitor your children's progress at a glance.",
      educator: 'Track your classroom progress.',
      admin: 'Platform-wide overview.',
    },
    recentActivity: 'Recent Activity',
    noRecentActivity: 'No recent activity yet.',
    quickActions: 'Quick Actions',
    updatedOn: 'Updated on {date}',
    updatedUnknown: 'Last update unknown',
    activityPercent: '{percent}% complete',
    activityDefaultSubtitle: 'Keep up the great work!',
    labels: {
      unknownSub: 'Sub-competency',
      unknownActor: 'Learner',
    },
    cards: {
      totalCompetencies: 'Total competencies',
      validated: 'Validated',
      inProgress: 'In progress',
      pendingValidation: 'Pending validation',
      locked: 'Locked',
      recommended: '{count} recommended',
      totalChildren: 'Children',
      totalStudents: 'Students',
      activeCompetencies: 'Active competencies',
      pendingReviews: 'Pending reviews',
      totalUsers: 'Users',
      adminStudents: 'Students',
      adminEducators: 'Educators',
      adminParents: 'Parents',
      adminAdmins: '{count} admins',
    },
    actions: {
      myCompetencies: 'My competencies',
      viewAssessments: 'View assessments',
      myProjects: 'My projects',
      viewReports: 'View reports',
      viewChildren: 'View children',
      manageStudents: 'Manage students',
      manageUsers: 'Manage users',
      manageDomains: 'Manage domains',
    },
  },

  // Common terms
  common: {
    view: 'View',
    edit: 'Edit',
    delete: 'Delete',
    cancel: 'Cancel',
    submit: 'Submit',
    save: 'Save',
    user: 'User',
    users: 'Users',
    profile: 'Profile',
    role: 'Role',
    status: 'Status',
    email: 'Email',
    name: 'Name',
    firstName: 'First Name',
    lastName: 'Last Name',
    username: 'Username',
    close: 'Close',
    actions: 'Actions',
    refresh: 'Refresh',
    create: 'Create',
    clear: 'Clear',
    clearSelection: 'Clear Selection',
    yes: 'Yes',
    no: 'No',
    loading: 'Loading...',
    download: 'Download',
    unknown: 'Unknown',
  },

  resource: {
    openFile: 'Open file',
  },

  // Admin section
  admin: {
    userManagement: 'User Management',
    addUser: 'Add User',
    addNewUser: 'Add New User',
    bulkImport: 'Bulk Import',
    searchUsers: 'Search users...',
    resetPassword: 'Reset Password',
    activate: 'Activate',
    deactivate: 'Deactivate',
    changeRole: 'Change Role',
    changeRolePrompt: 'Select the new role for the selected users ({count}).',
    bulkRoleSuccess: 'Updated role for {count} user(s).',
    bulkRolePartial: 'Updated {success} user(s); {failed} failed.',
    bulkRoleNoChanges: 'All selected users already have this role.',
    bulkRoleError: 'Could not update the selected users. Please try again.',
    usernameHint: 'Leave blank to auto-generate',
    contactInfo: 'Contact Information',
    userName: 'Full Name',
    avatar: {
      clear: 'Clear',
      regenerate: 'Regenerate',
      random: 'Random',
    },
    editUser: 'Edit User',
    avatarPickerTitle: 'Choose an avatar',
    userDetails: 'User Details',
    lastActive: 'Last Active',
    memberSince: 'Member Since',
    stats: {
      totalUsers: 'Total Users',
      students: 'Students',
      newThisMonth: 'New This Month',
      onlineNow: 'Online Now',
    },
    userDetailsLoadFailed: 'Failed to load full user details. Please try again.',
  },

  profile: {
    uploadPhoto: 'Upload Photo',
    picture: 'Profile Photo',
    uploadInstructions: 'Drag and Drop an image to replace your profile picture.',
    uploadError: 'Could not upload the photo. Please try again.',
  },

  educator: {
    assignLabel: 'Add to my students',
    unassignLabel: 'Remove from my students',
    parents: 'Parents',
    educators: 'Educators',
    myStudentsTitle: 'My Students',
    searchStudents: 'Search students...',
    myStudentsTab: 'My Students',
    allStudentsTab: 'All Students',
    noMyStudents: 'You have not assigned any students yet.',
    noStudentsFound: 'No students match your search.',
    missingEducatorId: 'We could not identify your educator account. Please sign in again.',
    assignSuccess: 'Student added to your list.',
    unassignSuccess: 'Student removed from your list.',
    refreshSuccess: 'Student list refreshed.',
    viewCompetencies: 'View competencies',
    viewAssessments: 'View assessments',
    viewReport: 'View report',
    assignError: 'Could not assign the student. Please try again.',
    unassignError: 'Could not remove the student. Please try again.',
    assignParent: 'Assign Parent',
    parentAssignSuccess: 'Parent linked to student.',
    assignParentError: 'Could not assign the parent. Please try again.',
    removeParentError: 'Could not remove the parent. Please try again.',
    parentRemoveSuccess: 'Parent removed from student.',
    parentSelectTitle: 'Assign Parent',
    parentSelectDescription: 'Choose a parent to link to this student.',
    parentSelectPlaceholder: 'Select a parent',
    assignParentConfirm: 'Link Parent',
    assignEducator: 'Assign Educator',
    assignEducatorConfirm: 'Link Educator',
    assignEducatorSuccess: 'Educator linked to student.',
    assignEducatorError: 'Could not assign the educator. Please try again.',
    removeEducatorSuccess: 'Educator removed from student.',
    removeEducatorError: 'Could not remove the educator. Please try again.',
    educatorSelectTitle: 'Assign Educator',
    educatorSelectDescription: 'Choose an educator to link to this student.',
    educatorSelectPlaceholder: 'Select an educator',
    noEducatorsAssigned: 'No educators assigned yet.',
    noParentsAssigned: 'No parents assigned yet.',
    assignSelf: 'Assign myself',
    unassignSelf: 'Unassign myself',
    assessments: {
      title: 'Pending validations',
      searchPlaceholder: 'Search students or competencies...',
      domainFilterLabel: 'Domain',
      studentFilterLabel: 'Student',
      emptyState: 'No pending validations to review.',
      table: {
        student: 'Student',
        evaluationStatus: 'Evaluations status',
        markValidated: 'Mark validated',
        menu: {
          openCompetencies: 'Open all competencies',
          openAssessments: 'Open all assessments',
          openSubCompetency: 'Open sub-competency',
        },
      },
    },
    projects: {
      title: 'Student Projects',
      searchPlaceholder: 'Search projects, students, or competencies...',
      studentFilterLabel: 'Student',
      subCompetencyFilterLabel: 'Competency',
      emptyState: 'No submitted projects to review.',
      loadError: 'Failed to load student projects',
      selectedCount: '{count} project(s) selected',
      tableTitle: 'Submitted Projects',
      tableHint: 'Review and approve or reject student project submissions',
      columns: {
        student: 'Student',
        name: 'Project',
        subCompetency: 'Competency',
        status: 'Status',
        submittedAt: 'Submitted',
      },
    },
  },

  domains: {
    title: 'Domains',
    subtitle: 'Organise competencies by domain',
    addDomain: 'Add Domain',
    createTitle: 'Create Domain',
    editTitle: 'Edit Domain',
    loading: 'Loading domains...',
    emptyState: 'No domains found yet. Create the first one to get started.',
    messages: {
      created: 'Domain created successfully.',
      updated: 'Domain updated successfully.',
      deleted: 'Domain deleted successfully.',
      deleteConfirm: 'Delete the domain "{name}"? This action cannot be undone.',
      error: 'Something went wrong. Please try again.',
    },
    fields: {
      name: 'Domain name',
      color: 'Color (optional)',
    },
    actions: {
      create: 'Create',
      save: 'Save changes',
    },
    competencyCount: 'None | 1 competency | {count} competencies',
  },

  resources: {
    title: 'Resources',
    addResource: 'Add Resource',
    addTitle: 'Add Resource',
    editTitle: 'Edit Resource',
    emptyState: 'No resources found',
    actions: {
      create: 'Create resource',
      save: 'Save changes',
    },
    fields: {
      type: 'Type',
      title: 'Title',
      description: 'Description',
      url: 'URL',
      upload: 'Upload file',
      helperUser: 'Helper User',
    },
    messages: {
      created: 'Resource created.',
      updated: 'Resource updated.',
      deleted: 'Resource deleted.',
      error: 'Could not update the resource. Please try again.',
      deleteConfirm: 'Delete this resource? This action cannot be undone.',
    },
  },

  evaluations: {
    title: 'Evaluations',
    addEvaluation: 'Add Evaluation',
    addTitle: 'Add Evaluation',
    editTitle: 'Edit Evaluation',
    emptyState: 'No evaluations yet.',
    minutesShort: 'min',
    noDuration: 'No duration specified',
    noDescription: 'No description provided.',
    createSuccess: 'Evaluation added.',
    createError: 'Could not add the evaluation. Please try again.',
    updateSuccess: 'Evaluation updated.',
    updateError: 'Could not update the evaluation. Please try again.',
    deleteSuccess: 'Evaluation deleted.',
    deleteError: 'Could not delete the evaluation. Please try again.',
    deleteConfirm: 'Delete the evaluation "{name}"? This action cannot be undone.',
    openError: 'Unable to open the evaluation file. Please try again.',
    deliveryRequired: 'Provide a URL or upload a file before saving.',
    actions: {
      start: 'Start',
      complete: 'Completed',
      startSuccess: 'Evaluation started.',
      startError: 'Could not start the evaluation. Please try again.',
      completeSuccess: 'Evaluation marked as completed.',
      completeError: 'Could not mark the evaluation as completed. Please try again.',
    },
    fields: {
      name: 'Name',
      description: 'Description',
      mode: 'Mode',
      format: 'Format',
      duration: 'Duration (minutes)',
      durationShort: 'Duration',
      delivery: 'Delivery',
      url: 'URL',
      upload: 'Upload file',
    },
    delivery: {
      url: 'URL',
      file: 'Upload',
    },
  },

  assessments: {
    title: 'Assessments',
    viewingFor: 'Viewing assessments for {name}',
    filters: {
      searchPlaceholder: 'Search evaluations...',
      status: 'Status',
      domain: 'Domain',
    },
    summary: {
      total: 'Total evaluations',
      notStarted: 'Not started',
      inProgress: 'In progress',
      completed: 'Completed',
    },
    status: {
      NotStarted: 'Not started',
      InProgress: 'In progress',
      Completed: 'Completed',
    },
    empty: 'No evaluations match the current filters.',
    errors: {
      noUser: 'Unable to determine which user to load.',
      userNotFound: 'The selected user could not be found.',
      notStudent: '{name} is not a student.',
      generic: 'Unable to load assessments. Please try again.',
    },
  },

  competencies: {
    title: 'Competencies',

    addCompetency: 'Add Competency',
    addSubCompetency: 'Add sub-competency',
    createTitle: 'Create Competency',
    newSubCompetency: 'New sub-competency',
    name: 'Competency name',
    fields: {
      name: 'Competency name',
      description: 'Description',
      objectives: 'Objectives',
    },
    actions: {
      create: 'Create',
      save: 'Save changes',
    },
    loading: 'Loading competencies...',
    emptyState: 'No competencies in this domain yet.',
    noDescription: 'No description provided.',
    searchPlaceholder: 'Search competencies...',
    viewingFor: 'Viewing competencies for {name}',
    summary: {
      total: 'Total sub-competencies',
      validated: 'Validated',
      inProgress: 'In progress',
      pending: 'Pending validation',
      locked: 'Locked',
      notStarted: 'Not started',
    },
    editor: {
      breadcrumb: 'Competency editor',
      loading: 'Loading competency...',
      tabs: {
        details: 'Details',
        stages: 'Stages',
        resources: 'Resources',
      },
      messages: {
        notFound: 'Competency not found.',
        loadError: 'Could not load the competency. Please try again.',
        saveError: 'Could not save the competency. Please try again.',
        saved: 'Competency updated successfully.',
      },
    },
    messages: {
      created: 'Competency created successfully.',
      deleted: 'Competency deleted successfully.',
      deleteConfirm: 'Delete the competency "{name}"? This action cannot be undone.',
      error: 'Could not save the competency. Please try again.',
      loadError: 'Could not load domain details. Please try again.',
    },
    subCompetencies: 'Sub-Competencies',
  },
  subCompetencies: {
    title: 'Sub-Competencies',
    loading: 'Loading sub-competency...',
    newSubCompetency: 'New sub-competency',
    name: 'Sub-competency name',
    level: 'Level',
    description: 'Description',
    objectives: 'Objectives',
    emptyState: 'No sub-competencies found',
    noDescription: 'No description provided',
    deleted: 'Sub-competency deleted successfully.',
    deleteConfirm: 'Delete the sub-competency "{name}"? This action cannot be undone.',
    deleteError: 'Could not delete the sub-competency. Please try again.',
    studentProgress: 'Student Progress',
    studentProgressHint: 'Manage student progress.',
    status: 'Status',
    percent: 'Percent',
    locked: 'Locked',
    recommended: 'Recommended',
    unlockAction: 'Unlock',
    recommendAction: 'Recommend',
    lockAction: 'Lock',
    validateAction: 'Validate',
    pendingValidationAction: 'I think I acquired this',
    progressSteps: {
      remember: 'I can remember',
      explain: 'I understand and can explain',
      apply: 'I can apply this',
      master: 'I acquired this',
    },
    unlockSuccess: 'Student access unlocked.',
    recommendSuccess: 'Sub-competency recommended to the selected students.',
    lockSuccess: 'Student access locked.',
    validateSuccess: 'Student marked as validated.',
    pendingValidationSuccess: 'Request sent for validation.',
    progressStepSuccess: 'Progress updated.',
    progressUpdateError: 'Could not update student progress. Please try again.',
  },

  progressStatus: {
    NotStarted: 'Not started',
    InProgress: 'In progress',
    PendingValidation: 'Pending validation',
    Validated: 'Validated',
    Locked: 'Locked',
  },

  // Reports
  reports: {
    title: 'Student Reports',
    studentReport: 'Student Report',
    emptyState: {
      title: 'No report generated',
      subtitle: 'Select a time period and generate a report to view student progress',
    },
    errors: {
      noStudentId: 'No student ID provided',
    },
    messages: {
      generated: 'Report generated successfully',
    },
    noEvidence: 'No evidence',
    noChange: 'No change',
    filters: {
      title: 'Report Filters',
      period: 'Time Period',
      startDate: 'Start Date',
      endDate: 'End Date',
      domain: 'Domain Filter',
      options: 'Options',
      includeDetails: 'Include details',
    },
    summary: {
      title: 'Summary',
      domainsCovered: 'Domains',
      competenciesAdvanced: 'Advanced',
      competenciesAcquired: 'Acquired',
      totalActivity: 'Activities',
      periodInfo: 'Report period: {start} to {end}',
    },
    domain: {
      competenciesCount: '{count} competencies | {count} competency | {count} competencies',
    },
    table: {
      competency: 'Competency',
      subCompetency: 'Sub-competency',
      status: 'Status',
      progress: 'Progress',
      change: 'Change',
      lastEvidence: 'Last Evidence',
    },
    actions: {
      title: 'Actions',
      generate: 'Generate Report',
      print: 'Print',
      exportPdf: 'Export PDF',
      regenerate: 'Regenerate',
      pdfExportInfo: "Use your browser's print function to save as PDF",
    },
    info: {
      generatedAt: 'Generated on {time}',
      generatedBy: 'Generated by {name}',
    },
  },

  // Validation messages
  validation: {
    required: 'This field is required',
    emailRequired: 'Email is required',
    emailInvalid: 'Please enter a valid email address',
    nameRequired: 'Name is required',
    firstNameRequired: 'First name is required',
    lastNameRequired: 'Last name is required',
    roleRequired: 'Role is required',
    maxLength: 'Maximum {max} characters allowed',
  },

  // Login and authentication
  login: {
    welcomeBack: 'Welcome Back',
    enterCredentials: 'Enter your credentials to continue',
    signIn: 'Sign In',
    accessDashboard: 'Access your competency dashboard',
    createAccount: 'Create Account',
    joinPlatform: 'Join the competency learning platform',
    termsAndPrivacy: 'By signing in, you agree to our Terms of Service and Privacy Policy',
    success: 'Login successful',
    signedIn: 'You are now signed in to Competency Hub.',
  },

  // Projects
  projects: {
    myProjects: 'My Projects',
    title: 'Projects',
    manageDescription: 'Create and manage your project submissions',
    newProject: 'New Project',
    createFirst: 'Create Your First Project',
    subCompetency: 'Sub-Competency',
    noDescription: 'No description provided',
    emptyState: {
      title: 'No Projects Yet',
      description: 'Start your learning journey by creating your first project submission.',
    },
    loadError: 'Failed to load projects',
    status: {
      draft: 'Draft',
      submitted: 'Submitted',
      approved: 'Approved',
      rejected: 'Rejected',
    },
    summary: {
      total: 'Total Projects',
      draft: 'Draft Projects',
      submitted: 'Submitted Projects',
      approved: 'Approved Projects',
    },
    filters: {
      searchPlaceholder: 'Search by project, description, or competency...',
      status: 'Status',
      competency: 'Competency',
      clearHint: 'Try adjusting or clearing your filters to see more projects.',
    },
    emptyFiltered: 'No projects match the selected filters.',
    form: {
      createTitle: 'Create New Project',
      editTitle: 'Edit Project',
      name: 'Project Name',
      description: 'Description',
      subCompetency: 'Sub-Competency',
      noSubCompetencies: 'No sub-competencies available',
      currentFile: 'Current File',
      fileUploaded: 'File uploaded',
      uploadFile: 'Upload File',
      selectFile: 'Choose file or drag here',
      fileHint: 'Supported formats: PDF, DOC, DOCX, TXT, ZIP (max 10MB)',
      fileTooLarge: 'File is too large (max 10MB)',
      fileRejected: 'File type not supported',
      status: 'Status',
      createSuccess: 'Project created successfully',
      updateSuccess: 'Project updated successfully',
      createError: 'Failed to create project',
      updateError: 'Failed to update project',
      errorLoadingSubCompetencies: 'Failed to load sub-competencies',
    },
    actions: {
      submit: 'Submit',
      approve: 'Approve',
      reject: 'Reject',
      submitSuccess: 'Project submitted successfully',
      approveSuccess: 'Project approved successfully',
      rejectSuccess: 'Project rejected successfully',
      submitError: 'Failed to submit project',
      approveError: 'Failed to approve project',
      rejectError: 'Failed to reject project',
    },
    delete: {
      confirmTitle: 'Delete Project',
      confirmMessage: 'Are you sure you want to delete "{name}"? This action cannot be undone.',
      success: 'Project deleted successfully',
      error: 'Failed to delete project',
    },
    detail: {
      errorTitle: 'Project Not Found',
      notFound: 'The requested project could not be found',
      loadError: 'Failed to load project details',
      information: 'Project Information',
      metadata: 'Details',
      subCompetency: 'Sub-Competency',
      noDescription: 'No description provided',
      attachment: 'File Attachment',
      fileUploaded: 'Uploaded file',
      student: 'Student',
      created: 'Created',
      updated: 'Last Updated',
    },
  },
};
